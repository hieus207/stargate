"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2222,9739],{29739:function(e,n,a){a.r(n),a.d(n,{getPublicConnection:function(){return t}});let t=async e=>{let{mainnetConnection:n,devnetConnection:t}=await Promise.all([a.e(5608),a.e(5989),a.e(9266),a.e(1318)]).then(a.bind(a,11318));switch(e){case"solana":return n;case"solana-testnet":return t}throw Error("Unsupported chainKey: ".concat(e))}},25536:function(e,n,a){a.d(n,{_X:function(){return i},w$:function(){return r}});var t=a(18742),s=a(87376).Buffer;function i(e,n){let{client:a,chainKey:t}=n;return{chainKey:t,build:async()=>await a.transaction.build.simple({sender:e.sender,data:e.data}),unwrap:async()=>e,async signAndSubmitTransaction(e){throw Error("Not implemented: tx.signAndSubmitTransaction is deprecated")},estimateGas(e){throw Error("Method not implemented.")},estimateNative:e=>{throw Error("Function not implemented.")}}}function r(e,n,a){if(0n===BigInt(n))return function(e){let n=[0,1].concat(Array.from(m(e)));return Uint8Array.from(s.from(n))}(e);let i=[0,2].concat(Array.from(m(e))).concat(Array.from(m(n))).concat(Array.from((0,t.nr)(function(e){if(e.startsWith("0x"))return e;throw Error("Invalid hex value ".concat(e))}(a))));return s.from(i)}function m(e){return(0,t.hL)(e,{size:8,signed:!1})}},92117:function(e,n,a){a.d(n,{AN:function(){return F},RJ:function(){return G},T:function(){return em},Wn:function(){return J},ds:function(){return Y},lk:function(){return er},ol:function(){return V},r7:function(){return Q},st:function(){return j}});var t=a(38623),s=a(29715),i=a(87555),r=a(54228),m=a(55041),o=a(26412),u=a(65720),d=a(48874),c=a(18742),g=a(27100),l=a(91185),p=a(79429),y=a(81339),M=a(10889),f=a(51967),S=a(1573),b=a(9866),k=a(35440),h=a(18209),P=a(25536),v=a(86946),A=a(70531),T=a(87376).Buffer,w="usdc-cctp-v1";function K(e,n){return e.deployments[n]}function x(e,n){let a=K(e,n);if(a)return a;throw Error("No deployment for ".concat(n))}function C(e,n,a,s){let i=K(a,e.chainKey);if(!(null==i?void 0:i.token.equals(e)))return!1;let r=K(a,n.chainKey);if(!(null==r?void 0:r.token.equals(n)))return!1;let m=(0,t.lJ)(e.chainKey);return(null==m?void 0:m.chainType)===s&&e.chainKey!==n.chainKey}function D(e,n){return{estimated:x(e,n.srcChainKey).duration.estimated}}function I(e,n){if(0n!==e.dstNativeAmount)throw Error("Native drop not supported");let a=x(n,e.srcChainKey);if(e.srcAmount>a.srcAmountMax)throw Error("Amount is too large, max amount is 1,000,000 USDC")}async function E(e,n){let{srcChainKey:a,srcTxHash:t}=n,s=x(e,a),{data:i}=await (0,u.Z)({method:"GET",baseURL:e.api.url,url:"/v1/messages/".concat(s.domain,"/").concat(t)});return B.parse(i)}var B=S.ZP.object({messages:S.ZP.object({attestation:S.ZP.string(),message:S.ZP.string(),eventNonce:S.ZP.string()}).array()});async function R(e,n){let{data:a}=await (0,u.Z)({method:"GET",baseURL:e.api.url,url:"/v1/attestations/".concat(n)});return U.parse(a)}var U=S.ZP.object({attestation:S.ZP.string(),status:S.ZP.string()});function F(e){let{pollInterval:n=3e3}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return{async waitForTransaction(a){let t,{srcChainKey:s,srcTxHash:i}=a;for(;;){try{if(!t){let{messages:n}=await E(e,{srcChainKey:s,srcTxHash:i});n.every(e=>"PENDING"!==e.attestation)&&(t=n.at(0))}if(t){var r;let n=(r=t.message,(0,d.w)(r)),a=await R(e,n);if("complete"===a.status)return{...t,...a}}}catch(e){console.error("Error getting CCTP attestation",e)}await _(n)}}}}var _=e=>new Promise(n=>setTimeout(n,e));function O(e,n){let{dstAddress:a,dstChainKey:i}=n,r=(0,t.H1)(i);switch(r){case"aptos":case"evm":return(0,t.fs)(a,r);case"solana":{let n=new m.PublicKey(a),t=new m.PublicKey(x(e,i).token.address);return(0,s.MO)(t,n).toBytes()}}throw Error("Unsupported chain ".concat(i))}function N(e){if("string"==typeof e)return N((0,c.nr)(e));let n=(0,g.tm)(e.slice(0,4));if(0!==n)throw new W(n,{cause:e});let a=(0,g.tm)(e.slice(4,8)),t=(0,g.tm)(e.slice(8,12)),s=(0,g.v3)(e.slice(12,20)),i=(0,l.ci)(e.slice(20,52));return{version:n,sourceDomain:a,destinationDomain:t,nonce:s,sender:i,recipient:(0,l.ci)(e.slice(52,84)),destinationCaller:(0,l.ci)(e.slice(84,116)),messageBody:(0,l.ci)(e.slice(116))}}function L(e){if("string"==typeof e)return L((0,c.nr)(e));let n=(0,g.tm)(e.slice(0,4));if(0!==n)throw new W(n,{cause:e});let a=(0,l.ci)(e.slice(4,36));return{version:n,burnToken:a,mintRecipient:(0,l.ci)(e.slice(36,68)),amount:(0,g.v3)(e.slice(68,100)),messageSender:(0,l.ci)(e.slice(100,132))}}var W=class extends Error{constructor(e,n){super("Unsupported message version: ".concat(e),n)}},z=S.ZP.object({publicKeys:S.ZP.string().array()}),Z=o(async e=>{try{let{data:n}=await (0,u.Z)({method:"GET",baseURL:e.api.url,url:"/v1/publicKeys"}),{publicKeys:a}=z.parse(n);return!a||0===a.length}catch(e){return!0}},{maxAge:3e5,isPromise:!0});function X(e,n){var a;let{srcAmountMax:t}=x(e,n.srcChainKey),s=(a=n.srcAmount)<t?a:t;return{srcAmount:s,dstAmount:s,srcAmountMax:t}}var G=function(e){let n={api:e.api,deployments:{}};for(let[a,s]of Object.entries(e.deployments)){if(!s)continue;let e=t.WU.from({chainKey:a,...s.token});n.deployments[a]={srcAmountMax:s.srcAmountMax,domain:s.domain,token:e,tokenMinter:s.tokenMinter,tokenMessenger:s.tokenMessenger,messageTransmitter:s.messageTransmitter,duration:s.duration}}return n}({api:{url:"https://iris-api.circle.com"},deployments:{arbitrum:{domain:3,srcAmountMax:1000000000000n,duration:{estimated:780},token:{decimals:6,symbol:"USDC",name:"USD Coin",address:"0xaf88d065e77c8cC2239327C5EDb3A432268e5831"},tokenMessenger:{address:"0x19330d10D9Cc8751218eaf51E8885D058642E08A"},tokenMinter:{address:"0xE7Ed1fa7f45D05C508232aa32649D89b73b8bA48"},messageTransmitter:{address:"0xC30362313FBBA5cf9163F0bb16a0e01f01A896ca"}},avalanche:{domain:1,srcAmountMax:1000000000000n,duration:{estimated:20},token:{decimals:6,symbol:"USDC",name:"USD Coin",address:"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"},tokenMessenger:{address:"0x6b25532e1060ce10cc3b0a99e5683b91bfde6982"},tokenMinter:{address:"0x420f5035fd5dc62a167e7e7f08b604335ae272b8"},messageTransmitter:{address:"0x8186359af5f57fbb40c6b14a588d2a59c0c29880"}},base:{domain:6,srcAmountMax:1000000000000n,duration:{estimated:780},token:{name:"USD Coin",symbol:"USDC",decimals:6,address:"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"},tokenMessenger:{address:"0x1682Ae6375C4E4A97e4B583BC394c861A46D8962"},tokenMinter:{address:"0xe45B133ddc64bE80252b0e9c75A8E74EF280eEd6"},messageTransmitter:{address:"0xAD09780d193884d503182aD4588450C416D6F9D4"}},ethereum:{domain:0,srcAmountMax:1000000000000n,duration:{estimated:780},token:{decimals:6,symbol:"USDC",name:"USD Coin",address:"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"},tokenMessenger:{address:"0xbd3fa81b58ba92a82136038b25adec7066af3155"},tokenMinter:{address:"0xc4922d64a24675e16e1586e3e3aa56c06fabe907"},messageTransmitter:{address:"0x0a992d191deec32afe36203ad87d7d289a738f81"}},optimism:{domain:2,srcAmountMax:1000000000000n,duration:{estimated:780},token:{decimals:6,symbol:"USDC",name:"USD Coin",address:"0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85"},tokenMessenger:{address:"0x2B4069517957735bE00ceE0fadAE88a26365528f"},tokenMinter:{address:"0x33E76C5C31cb928dc6FE6487AB3b2C0769B1A1e3"},messageTransmitter:{address:"0x4d41f22c5a0e5c74090899e5a8fb597a8842b3e8"}},polygon:{domain:7,srcAmountMax:1000000000000n,duration:{estimated:480},token:{decimals:6,symbol:"USDC",name:"USD Coin",address:"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"},tokenMessenger:{address:"0x9daF8c91AEFAE50b9c0E69629D3F6Ca40cA3B3FE"},tokenMinter:{address:"0x10f7835F827D6Cf035115E10c50A853d7FB2D2EC"},messageTransmitter:{address:"0xF3be9355363857F3e001be68856A2f96b4C39Ba9"}},solana:{domain:5,srcAmountMax:1000000000000n,duration:{estimated:25},token:{symbol:"USDC",name:"USD Coin (USDC)",decimals:6,address:"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"},tokenMessenger:{address:"CCTPiPYPc6AsJuwueEnWgSgucamXDZwBd53dQ11YiKX3"},messageTransmitter:{address:"CCTPmbSD7gX1bxKPAmg77w8oFzNFpaQiQUWD43TKaecd"}},aptos:{domain:9,srcAmountMax:1000000000000n,duration:{estimated:20},token:{decimals:6,symbol:"USDC",name:"USD Coin",address:"0xbae207659db88bea0cbead6da0ed00aac12edcdda169e591cd41c94180b46f3b"},tokenMessenger:{address:"0x2aa6c5d56376c371f88a6cc42e852824994993cb9bab8d3e6450cbe3cb32b94e"},tokenMinter:{address:"0x9bce6734f7b63e835108e3bd8c36743d4709fe435f44791918801d0989640a9d"},messageTransmitter:{address:"0x177e17751820e4b4371873ca8c30279be63bdea63b88ed0f2239c2eea10f1772"}}}}),j=class{async getOptions(e){return{options:[{mode:"taxi"}]}}async getAllowance(e){let n=await this.getClient(e.srcChainKey),a=x(this.config,e.srcChainKey),t=(0,p.K)(e.srcAddress),s=(0,p.K)(a.tokenMessenger.address);return n.readContract({abi:y.Wo,address:(0,p.K)(a.token.address),functionName:"allowance",args:[t,s]})}async getRoute(e){let{srcAmount:n,dstAmount:a,srcAmountMax:t}=X(this.config,e),[s,i]=await Promise.all([this.getAllowance(e),this.getDuration(e)]);return(0,b.Jg)(e,{route:w,srcAmount:n,dstAmount:a,srcAmountMax:t,allowance:s,messageFee:{nativeFee:0n,zroFee:0n},duration:i})}async approve(e){let n=x(this.config,e.srcChainKey),a=(0,p.K)(e.srcAddress),t=(0,p.K)(n.tokenMessenger.address),s=e.srcAmount,i=(0,p.K)(n.token.address),r=(0,M.R)({abi:y.Wo,functionName:"approve",args:[t,s]});return(0,k._X)({to:i,data:r,from:a},{chainKey:e.srcChainKey})}async transfer(e){I(e,this.config);let{srcChainKey:n,dstChainKey:a,srcAmount:t,srcAddress:s,srcToken:i}=e;if(await Z(this.config))throw Error("CCTP transfer are not available in your region, please try a different route.");let r=x(this.config,n),m=x(this.config,a),o=(0,M.R)({abi:H,functionName:"depositForBurn",args:[t,m.domain,(0,l.ci)(O(this.config,e)),(0,p.K)(i)]});return(0,k._X)({to:r.tokenMessenger.address,data:o,from:(0,p.K)(s)},{chainKey:n})}async getDuration(e){return D(this.config,e)}supportsTransfer(e,n){return C(e,n,this.config,"evm")}constructor(e,n){this.config=e,this.getClient=n}},H=[{inputs:[{name:"amount",type:"uint256"},{name:"destinationDomain",type:"uint32"},{name:"mintRecipient",type:"bytes32"},{name:"burnToken",type:"address"}],name:"depositForBurn",outputs:[{name:"_nonce",type:"uint64"}],stateMutability:"nonpayable",type:"function"}],q=[{inputs:[{internalType:"bytes",name:"message",type:"bytes"},{internalType:"bytes",name:"attestation",type:"bytes"}],name:"receiveMessage",outputs:[{internalType:"bool",name:"success",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"usedNonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}];async function J(e,n){let{attestation:a,cctpMessage:t}=n,{messageTransmitter:s,chainKey:i}=V(e,t);return(0,k._X)({data:(0,M.R)({abi:q,functionName:"receiveMessage",args:[t,a]}),to:(0,p.K)(s.address)},{chainKey:i})}function V(e,n){let a=N(n);for(let[n,t]of Object.entries(e.deployments))if((null==t?void 0:t.domain)===a.destinationDomain)return Object.assign({chainKey:n},t);throw Error("No deployment found for destinationDomain: ".concat(a.destinationDomain),{cause:a})}var Q=class{async getOptions(e){return{options:[{mode:"taxi"}]}}async getRoute(e){let n=await this.getDuration(e),{srcAmount:a,dstAmount:s,srcAmountMax:i}=X(this.config,e);return(0,b.Jg)(e,{route:w,srcAmount:a,dstAmount:s,srcAmountMax:i,allowance:t.Bz,messageFee:{nativeFee:0n,zroFee:0n},duration:n})}async getDuration(e){return D(this.config,e)}async transfer(e){I(e,this.config);let{srcChainKey:n,dstChainKey:a,srcAmount:t,srcAddress:s,srcToken:i}=e;if(await Z(this.config))throw Error("CCTP transfer are not available in your region, please try a different route.");let r=x(this.config,a),m={bytecode:$.depositForBurn,functionArguments:[new h.G90(t),new h.PMf(r.domain),new h.kxK(O(this.config,e)),new h.kxK((0,c.nr)(i))]};return(0,P._X)({sender:s,data:m},{chainKey:n,client:await this.getClient(n)})}supportsTransfer(e,n){return C(e,n,this.config,"aptos")}constructor(e,n){this.config=e,this.getClient=n}},$={depositForBurn:"0xa11ceb0b0700000a0701000802080e031614042a04052e30075e870108e5014000000001000201030004000001050701000100060b0001070304010801020805060108010309080900010002010205060c030e05050208000b010108020108020105010b0101090003060c0b01010900030108000004060c08000e0501030e66756e6769626c655f6173736574066f626a656374167072696d6172795f66756e6769626c655f73746f72650f746f6b656e5f6d657373656e6765720d46756e6769626c654173736574064f626a656374084d6574616461746111616464726573735f746f5f6f626a656374087769746864726177106465706f7369745f666f725f6275726e00000000000000000000000000000000000000000000000000000000000000019bce6734f7b63e835108e3bd8c36743d4709fe435f44791918801d0989640a9d0000010f0b0438000c060a000b060b0138010c050b000b050b020b0311020102",handleReceiveMessage:"0xa11ceb0b0700000a0601000402040403080c051416072a53087d40000001010002000000030203000101040304000103060c0a020a020003060c060a02060a020108000101136d6573736167655f7472616e736d69747465720f746f6b656e5f6d657373656e67657207526563656970740f726563656976655f6d6573736167651668616e646c655f726563656976655f6d657373616765177e17751820e4b4371873ca8c30279be63bdea63b88ed0f2239c2eea10f17729bce6734f7b63e835108e3bd8c36743d4709fe435f44791918801d0989640a9d000001070b000e010e02110011010102"};async function Y(e,n,a){let{attestation:t,cctpMessage:s}=n,{sender:i,client:r}=a,{chainKey:m}=V(e,s),o=[h.sFe.U8((0,c.nr)(s)),h.sFe.U8((0,c.nr)(t))],u={bytecode:$.handleReceiveMessage,functionArguments:o};return(0,P._X)({sender:i,data:u},{chainKey:m,client:r})}var ee={version:"0.1.0",name:"message_transmitter",instructions:[{name:"initialize",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"upgradeAuthority",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"messageTransmitterProgramData",isMut:!1,isSigner:!1},{name:"messageTransmitterProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"InitializeParams"}}]},{name:"transferOwnership",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"TransferOwnershipParams"}}]},{name:"acceptOwnership",accounts:[{name:"pendingOwner",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"AcceptOwnershipParams"}}]},{name:"updatePauser",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"UpdatePauserParams"}}]},{name:"updateAttesterManager",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"UpdateAttesterManagerParams"}}]},{name:"pause",accounts:[{name:"pauser",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"PauseParams"}}]},{name:"unpause",accounts:[{name:"pauser",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"UnpauseParams"}}]},{name:"setMaxMessageBodySize",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"SetMaxMessageBodySizeParams"}}]},{name:"enableAttester",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"attesterManager",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"EnableAttesterParams"}}]},{name:"disableAttester",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"attesterManager",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"DisableAttesterParams"}}]},{name:"setSignatureThreshold",accounts:[{name:"attesterManager",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"SetSignatureThresholdParams"}}]},{name:"sendMessage",accounts:[{name:"eventRentPayer",isMut:!0,isSigner:!0},{name:"senderAuthorityPda",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!0},{name:"senderProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"SendMessageParams"}}],returns:"u64"},{name:"sendMessageWithCaller",accounts:[{name:"eventRentPayer",isMut:!0,isSigner:!0},{name:"senderAuthorityPda",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!0},{name:"senderProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"SendMessageWithCallerParams"}}],returns:"u64"},{name:"replaceMessage",accounts:[{name:"eventRentPayer",isMut:!0,isSigner:!0},{name:"senderAuthorityPda",isMut:!1,isSigner:!0},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!0},{name:"senderProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"ReplaceMessageParams"}}],returns:"u64"},{name:"receiveMessage",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"caller",isMut:!1,isSigner:!0},{name:"authorityPda",isMut:!1,isSigner:!1},{name:"messageTransmitter",isMut:!1,isSigner:!1},{name:"usedNonces",isMut:!0,isSigner:!1},{name:"receiver",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"ReceiveMessageParams"}}]},{name:"reclaimEventAccount",accounts:[{name:"payee",isMut:!0,isSigner:!0,docs:["rent SOL receiver, should match original rent payer"]},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!1}],args:[{name:"params",type:{defined:"ReclaimEventAccountParams"}}]},{name:"getNoncePda",accounts:[{name:"messageTransmitter",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"GetNoncePDAParams"}}],returns:"publicKey"},{name:"isNonceUsed",accounts:[{name:"usedNonces",isMut:!1,isSigner:!1,docs:["Account will be explicitly loaded to avoid error when it's not initialized"]}],args:[{name:"params",type:{defined:"IsNonceUsedParams"}}],returns:"bool"}],accounts:[{name:"messageSent",type:{kind:"struct",fields:[{name:"rentPayer",type:"publicKey"},{name:"message",type:"bytes"}]}},{name:"messageTransmitter",docs:["Main state of the MessageTransmitter program"],type:{kind:"struct",fields:[{name:"owner",type:"publicKey"},{name:"pendingOwner",type:"publicKey"},{name:"attesterManager",type:"publicKey"},{name:"pauser",type:"publicKey"},{name:"paused",type:"bool"},{name:"localDomain",type:"u32"},{name:"version",type:"u32"},{name:"signatureThreshold",type:"u32"},{name:"enabledAttesters",type:{vec:"publicKey"}},{name:"maxMessageBodySize",type:"u64"},{name:"nextAvailableNonce",type:"u64"}]}},{name:"usedNonces",docs:["UsedNonces account holds an array of bits that indicate which nonces were already used","so they can't be resused to receive new messages. Array starts with the first_nonce and","holds flags for UsedNonces::MAX_NONCES. Nonces are recorded separately for each remote_domain."],type:{kind:"struct",fields:[{name:"remoteDomain",type:"u32"},{name:"firstNonce",type:"u64"},{name:"usedNonces",type:{array:["u64",100]}}]}}],types:[{name:"AcceptOwnershipParams",type:{kind:"struct",fields:[]}},{name:"DisableAttesterParams",type:{kind:"struct",fields:[{name:"attester",type:"publicKey"}]}},{name:"EnableAttesterParams",type:{kind:"struct",fields:[{name:"newAttester",type:"publicKey"}]}},{name:"GetNoncePDAParams",type:{kind:"struct",fields:[{name:"nonce",type:"u64"},{name:"sourceDomain",type:"u32"}]}},{name:"InitializeParams",type:{kind:"struct",fields:[{name:"localDomain",type:"u32"},{name:"attester",type:"publicKey"},{name:"maxMessageBodySize",type:"u64"},{name:"version",type:"u32"}]}},{name:"IsNonceUsedParams",type:{kind:"struct",fields:[{name:"nonce",type:"u64"}]}},{name:"PauseParams",type:{kind:"struct",fields:[]}},{name:"ReceiveMessageParams",type:{kind:"struct",fields:[{name:"message",type:"bytes"},{name:"attestation",type:"bytes"}]}},{name:"HandleReceiveMessageParams",type:{kind:"struct",fields:[{name:"remoteDomain",type:"u32"},{name:"sender",type:"publicKey"},{name:"messageBody",type:"bytes"},{name:"authorityBump",type:"u8"}]}},{name:"ReclaimEventAccountParams",type:{kind:"struct",fields:[{name:"attestation",type:"bytes"}]}},{name:"ReplaceMessageParams",type:{kind:"struct",fields:[{name:"originalMessage",type:"bytes"},{name:"originalAttestation",type:"bytes"},{name:"newMessageBody",type:"bytes"},{name:"newDestinationCaller",type:"publicKey"}]}},{name:"SendMessageWithCallerParams",type:{kind:"struct",fields:[{name:"destinationDomain",type:"u32"},{name:"recipient",type:"publicKey"},{name:"messageBody",type:"bytes"},{name:"destinationCaller",type:"publicKey"}]}},{name:"SendMessageParams",type:{kind:"struct",fields:[{name:"destinationDomain",type:"u32"},{name:"recipient",type:"publicKey"},{name:"messageBody",type:"bytes"}]}},{name:"SetMaxMessageBodySizeParams",type:{kind:"struct",fields:[{name:"newMaxMessageBodySize",type:"u64"}]}},{name:"SetSignatureThresholdParams",type:{kind:"struct",fields:[{name:"newSignatureThreshold",type:"u32"}]}},{name:"TransferOwnershipParams",type:{kind:"struct",fields:[{name:"newOwner",type:"publicKey"}]}},{name:"UnpauseParams",type:{kind:"struct",fields:[]}},{name:"UpdateAttesterManagerParams",type:{kind:"struct",fields:[{name:"newAttesterManager",type:"publicKey"}]}},{name:"UpdatePauserParams",type:{kind:"struct",fields:[{name:"newPauser",type:"publicKey"}]}},{name:"MathError",type:{kind:"enum",variants:[{name:"MathOverflow"},{name:"MathUnderflow"},{name:"ErrorInDivision"}]}}],events:[{name:"OwnershipTransferStarted",fields:[{name:"previousOwner",type:"publicKey",index:!1},{name:"newOwner",type:"publicKey",index:!1}]},{name:"OwnershipTransferred",fields:[{name:"previousOwner",type:"publicKey",index:!1},{name:"newOwner",type:"publicKey",index:!1}]},{name:"PauserChanged",fields:[{name:"newAddress",type:"publicKey",index:!1}]},{name:"AttesterManagerUpdated",fields:[{name:"previousAttesterManager",type:"publicKey",index:!1},{name:"newAttesterManager",type:"publicKey",index:!1}]},{name:"MessageReceived",fields:[{name:"caller",type:"publicKey",index:!1},{name:"sourceDomain",type:"u32",index:!1},{name:"nonce",type:"u64",index:!1},{name:"sender",type:"publicKey",index:!1},{name:"messageBody",type:"bytes",index:!1}]},{name:"SignatureThresholdUpdated",fields:[{name:"oldSignatureThreshold",type:"u32",index:!1},{name:"newSignatureThreshold",type:"u32",index:!1}]},{name:"AttesterEnabled",fields:[{name:"attester",type:"publicKey",index:!1}]},{name:"AttesterDisabled",fields:[{name:"attester",type:"publicKey",index:!1}]},{name:"MaxMessageBodySizeUpdated",fields:[{name:"newMaxMessageBodySize",type:"u64",index:!1}]},{name:"Pause",fields:[]},{name:"Unpause",fields:[]}],errors:[{code:6e3,name:"InvalidAuthority",msg:"Invalid authority"},{code:6001,name:"ProgramPaused",msg:"Instruction is not allowed at this time"},{code:6002,name:"InvalidMessageTransmitterState",msg:"Invalid message transmitter state"},{code:6003,name:"InvalidSignatureThreshold",msg:"Invalid signature threshold"},{code:6004,name:"SignatureThresholdAlreadySet",msg:"Signature threshold already set"},{code:6005,name:"InvalidOwner",msg:"Invalid owner"},{code:6006,name:"InvalidPauser",msg:"Invalid pauser"},{code:6007,name:"InvalidAttesterManager",msg:"Invalid attester manager"},{code:6008,name:"InvalidAttester",msg:"Invalid attester"},{code:6009,name:"AttesterAlreadyEnabled",msg:"Attester already enabled"},{code:6010,name:"TooFewEnabledAttesters",msg:"Too few enabled attesters"},{code:6011,name:"SignatureThresholdTooLow",msg:"Signature threshold is too low"},{code:6012,name:"AttesterAlreadyDisabled",msg:"Attester already disabled"},{code:6013,name:"MessageBodyLimitExceeded",msg:"Message body exceeds max size"},{code:6014,name:"InvalidDestinationCaller",msg:"Invalid destination caller"},{code:6015,name:"InvalidRecipient",msg:"Invalid message recipient"},{code:6016,name:"SenderNotPermitted",msg:"Sender is not permitted"},{code:6017,name:"InvalidSourceDomain",msg:"Invalid source domain"},{code:6018,name:"InvalidDestinationDomain",msg:"Invalid destination domain"},{code:6019,name:"InvalidMessageVersion",msg:"Invalid message version"},{code:6020,name:"InvalidUsedNoncesAccount",msg:"Invalid used nonces account"},{code:6021,name:"InvalidRecipientProgram",msg:"Invalid recipient program"},{code:6022,name:"InvalidNonce",msg:"Invalid nonce"},{code:6023,name:"NonceAlreadyUsed",msg:"Nonce already used"},{code:6024,name:"MessageTooShort",msg:"Message is too short"},{code:6025,name:"MalformedMessage",msg:"Malformed message"},{code:6026,name:"InvalidSignatureOrderOrDupe",msg:"Invalid signature order or dupe"},{code:6027,name:"InvalidAttesterSignature",msg:"Invalid attester signature"},{code:6028,name:"InvalidAttestationLength",msg:"Invalid attestation length"},{code:6029,name:"InvalidSignatureRecoveryId",msg:"Invalid signature recovery ID"},{code:6030,name:"InvalidSignatureSValue",msg:"Invalid signature S value"},{code:6031,name:"InvalidMessageHash",msg:"Invalid message hash"}]},en={version:"0.1.0",name:"token_messenger_minter",instructions:[{name:"initialize",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"upgradeAuthority",isMut:!1,isSigner:!0},{name:"authorityPda",isMut:!1,isSigner:!1},{name:"tokenMessenger",isMut:!0,isSigner:!1},{name:"tokenMinter",isMut:!0,isSigner:!1},{name:"tokenMessengerMinterProgramData",isMut:!1,isSigner:!1},{name:"tokenMessengerMinterProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"InitializeParams"}}]},{name:"transferOwnership",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"TransferOwnershipParams"}}]},{name:"acceptOwnership",accounts:[{name:"pendingOwner",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"AcceptOwnershipParams"}}]},{name:"addRemoteTokenMessenger",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"owner",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"remoteTokenMessenger",isMut:!0,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"AddRemoteTokenMessengerParams"}}]},{name:"removeRemoteTokenMessenger",accounts:[{name:"payee",isMut:!0,isSigner:!0},{name:"owner",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"remoteTokenMessenger",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"RemoveRemoteTokenMessengerParams"}}]},{name:"depositForBurn",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"eventRentPayer",isMut:!0,isSigner:!0},{name:"senderAuthorityPda",isMut:!1,isSigner:!1},{name:"burnTokenAccount",isMut:!0,isSigner:!1},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"remoteTokenMessenger",isMut:!1,isSigner:!1},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!0,isSigner:!1},{name:"burnTokenMint",isMut:!0,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!0},{name:"messageTransmitterProgram",isMut:!1,isSigner:!1},{name:"tokenMessengerMinterProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"DepositForBurnParams"}}],returns:"u64"},{name:"depositForBurnWithCaller",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"eventRentPayer",isMut:!0,isSigner:!0},{name:"senderAuthorityPda",isMut:!1,isSigner:!1},{name:"burnTokenAccount",isMut:!0,isSigner:!1},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"remoteTokenMessenger",isMut:!1,isSigner:!1},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!0,isSigner:!1},{name:"burnTokenMint",isMut:!0,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!0},{name:"messageTransmitterProgram",isMut:!1,isSigner:!1},{name:"tokenMessengerMinterProgram",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"DepositForBurnWithCallerParams"}}],returns:"u64"},{name:"replaceDepositForBurn",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"eventRentPayer",isMut:!0,isSigner:!0},{name:"senderAuthorityPda",isMut:!1,isSigner:!1},{name:"messageTransmitter",isMut:!0,isSigner:!1},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"messageSentEventData",isMut:!0,isSigner:!0},{name:"messageTransmitterProgram",isMut:!1,isSigner:!1},{name:"tokenMessengerMinterProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"ReplaceDepositForBurnParams"}}],returns:"u64"},{name:"handleReceiveMessage",accounts:[{name:"authorityPda",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"remoteTokenMessenger",isMut:!1,isSigner:!1},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!0,isSigner:!1},{name:"tokenPair",isMut:!1,isSigner:!1},{name:"recipientTokenAccount",isMut:!0,isSigner:!1},{name:"custodyTokenAccount",isMut:!0,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"HandleReceiveMessageParams"}}]},{name:"setTokenController",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"tokenMinter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"SetTokenControllerParams"}}]},{name:"pause",accounts:[{name:"pauser",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"PauseParams"}}]},{name:"unpause",accounts:[{name:"pauser",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"UnpauseParams"}}]},{name:"updatePauser",accounts:[{name:"owner",isMut:!1,isSigner:!0},{name:"tokenMessenger",isMut:!1,isSigner:!1},{name:"tokenMinter",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"UpdatePauserParams"}}]},{name:"setMaxBurnAmountPerMessage",accounts:[{name:"tokenController",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"SetMaxBurnAmountPerMessageParams"}}]},{name:"addLocalToken",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"tokenController",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!0,isSigner:!1},{name:"custodyTokenAccount",isMut:!0,isSigner:!1},{name:"localTokenMint",isMut:!1,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"AddLocalTokenParams"}}]},{name:"removeLocalToken",accounts:[{name:"payee",isMut:!0,isSigner:!0},{name:"tokenController",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!0,isSigner:!1},{name:"custodyTokenAccount",isMut:!0,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"RemoveLocalTokenParams"}}]},{name:"linkTokenPair",accounts:[{name:"payer",isMut:!0,isSigner:!0},{name:"tokenController",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"tokenPair",isMut:!0,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"LinkTokenPairParams"}}]},{name:"unlinkTokenPair",accounts:[{name:"payee",isMut:!0,isSigner:!0},{name:"tokenController",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"tokenPair",isMut:!0,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"UninkTokenPairParams"}}]},{name:"burnTokenCustody",accounts:[{name:"payee",isMut:!0,isSigner:!0},{name:"tokenController",isMut:!1,isSigner:!0},{name:"tokenMinter",isMut:!1,isSigner:!1},{name:"localToken",isMut:!1,isSigner:!1},{name:"custodyTokenAccount",isMut:!0,isSigner:!1},{name:"custodyTokenMint",isMut:!0,isSigner:!1},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"eventAuthority",isMut:!1,isSigner:!1},{name:"program",isMut:!1,isSigner:!1}],args:[{name:"params",type:{defined:"BurnTokenCustodyParams"}}]}],accounts:[{name:"tokenMessenger",type:{kind:"struct",fields:[{name:"owner",type:"publicKey"},{name:"pendingOwner",type:"publicKey"},{name:"localMessageTransmitter",type:"publicKey"},{name:"messageBodyVersion",type:"u32"},{name:"authorityBump",type:"u8"}]}},{name:"remoteTokenMessenger",type:{kind:"struct",fields:[{name:"domain",type:"u32"},{name:"tokenMessenger",type:"publicKey"}]}},{name:"tokenMinter",type:{kind:"struct",fields:[{name:"tokenController",type:"publicKey"},{name:"pauser",type:"publicKey"},{name:"paused",type:"bool"},{name:"bump",type:"u8"}]}},{name:"tokenPair",type:{kind:"struct",fields:[{name:"remoteDomain",type:"u32"},{name:"remoteToken",type:"publicKey"},{name:"localToken",type:"publicKey"},{name:"bump",type:"u8"}]}},{name:"localToken",type:{kind:"struct",fields:[{name:"custody",type:"publicKey"},{name:"mint",type:"publicKey"},{name:"burnLimitPerMessage",type:"u64"},{name:"messagesSent",type:"u64"},{name:"messagesReceived",type:"u64"},{name:"amountSent",type:"u128"},{name:"amountReceived",type:"u128"},{name:"bump",type:"u8"},{name:"custodyBump",type:"u8"}]}}],types:[{name:"AcceptOwnershipParams",type:{kind:"struct",fields:[]}},{name:"AddRemoteTokenMessengerParams",type:{kind:"struct",fields:[{name:"domain",type:"u32"},{name:"tokenMessenger",type:"publicKey"}]}},{name:"DepositForBurnWithCallerParams",type:{kind:"struct",fields:[{name:"amount",type:"u64"},{name:"destinationDomain",type:"u32"},{name:"mintRecipient",type:"publicKey"},{name:"destinationCaller",type:"publicKey"}]}},{name:"DepositForBurnParams",type:{kind:"struct",fields:[{name:"amount",type:"u64"},{name:"destinationDomain",type:"u32"},{name:"mintRecipient",type:"publicKey"}]}},{name:"HandleReceiveMessageParams",type:{kind:"struct",fields:[{name:"remoteDomain",type:"u32"},{name:"sender",type:"publicKey"},{name:"messageBody",type:"bytes"},{name:"authorityBump",type:"u8"}]}},{name:"InitializeParams",type:{kind:"struct",fields:[{name:"tokenController",type:"publicKey"},{name:"localMessageTransmitter",type:"publicKey"},{name:"messageBodyVersion",type:"u32"}]}},{name:"RemoveRemoteTokenMessengerParams",type:{kind:"struct",fields:[]}},{name:"ReplaceDepositForBurnParams",type:{kind:"struct",fields:[{name:"originalMessage",type:"bytes"},{name:"originalAttestation",type:"bytes"},{name:"newDestinationCaller",type:"publicKey"},{name:"newMintRecipient",type:"publicKey"}]}},{name:"TransferOwnershipParams",type:{kind:"struct",fields:[{name:"newOwner",type:"publicKey"}]}},{name:"AddLocalTokenParams",type:{kind:"struct",fields:[]}},{name:"BurnTokenCustodyParams",type:{kind:"struct",fields:[{name:"amount",type:"u64"}]}},{name:"LinkTokenPairParams",type:{kind:"struct",fields:[{name:"localToken",type:"publicKey"},{name:"remoteDomain",type:"u32"},{name:"remoteToken",type:"publicKey"}]}},{name:"PauseParams",type:{kind:"struct",fields:[]}},{name:"RemoveLocalTokenParams",type:{kind:"struct",fields:[]}},{name:"SetMaxBurnAmountPerMessageParams",type:{kind:"struct",fields:[{name:"burnLimitPerMessage",type:"u64"}]}},{name:"SetTokenControllerParams",type:{kind:"struct",fields:[{name:"tokenController",type:"publicKey"}]}},{name:"UninkTokenPairParams",type:{kind:"struct",fields:[]}},{name:"UnpauseParams",type:{kind:"struct",fields:[]}},{name:"UpdatePauserParams",type:{kind:"struct",fields:[{name:"newPauser",type:"publicKey"}]}},{name:"TokenMinterError",type:{kind:"enum",variants:[{name:"InvalidAuthority"},{name:"InvalidTokenMinterState"},{name:"ProgramPaused"},{name:"InvalidTokenPairState"},{name:"InvalidLocalTokenState"},{name:"InvalidPauser"},{name:"InvalidTokenController"},{name:"BurnAmountExceeded"},{name:"InvalidAmount"}]}}],events:[{name:"OwnershipTransferStarted",fields:[{name:"previousOwner",type:"publicKey",index:!1},{name:"newOwner",type:"publicKey",index:!1}]},{name:"OwnershipTransferred",fields:[{name:"previousOwner",type:"publicKey",index:!1},{name:"newOwner",type:"publicKey",index:!1}]},{name:"DepositForBurn",fields:[{name:"nonce",type:"u64",index:!1},{name:"burnToken",type:"publicKey",index:!1},{name:"amount",type:"u64",index:!1},{name:"depositor",type:"publicKey",index:!1},{name:"mintRecipient",type:"publicKey",index:!1},{name:"destinationDomain",type:"u32",index:!1},{name:"destinationTokenMessenger",type:"publicKey",index:!1},{name:"destinationCaller",type:"publicKey",index:!1}]},{name:"MintAndWithdraw",fields:[{name:"mintRecipient",type:"publicKey",index:!1},{name:"amount",type:"u64",index:!1},{name:"mintToken",type:"publicKey",index:!1}]},{name:"RemoteTokenMessengerAdded",fields:[{name:"domain",type:"u32",index:!1},{name:"tokenMessenger",type:"publicKey",index:!1}]},{name:"RemoteTokenMessengerRemoved",fields:[{name:"domain",type:"u32",index:!1},{name:"tokenMessenger",type:"publicKey",index:!1}]},{name:"SetTokenController",fields:[{name:"tokenController",type:"publicKey",index:!1}]},{name:"PauserChanged",fields:[{name:"newAddress",type:"publicKey",index:!1}]},{name:"SetBurnLimitPerMessage",fields:[{name:"token",type:"publicKey",index:!1},{name:"burnLimitPerMessage",type:"u64",index:!1}]},{name:"LocalTokenAdded",fields:[{name:"custody",type:"publicKey",index:!1},{name:"mint",type:"publicKey",index:!1}]},{name:"LocalTokenRemoved",fields:[{name:"custody",type:"publicKey",index:!1},{name:"mint",type:"publicKey",index:!1}]},{name:"TokenPairLinked",fields:[{name:"localToken",type:"publicKey",index:!1},{name:"remoteDomain",type:"u32",index:!1},{name:"remoteToken",type:"publicKey",index:!1}]},{name:"TokenPairUnlinked",fields:[{name:"localToken",type:"publicKey",index:!1},{name:"remoteDomain",type:"u32",index:!1},{name:"remoteToken",type:"publicKey",index:!1}]},{name:"Pause",fields:[]},{name:"Unpause",fields:[]},{name:"TokenCustodyBurned",fields:[{name:"custodyTokenAccount",type:"publicKey",index:!1},{name:"amount",type:"u64",index:!1}]}],errors:[{code:6e3,name:"InvalidAuthority",msg:"Invalid authority"},{code:6001,name:"InvalidTokenMessengerState",msg:"Invalid token messenger state"},{code:6002,name:"InvalidTokenMessenger",msg:"Invalid token messenger"},{code:6003,name:"InvalidOwner",msg:"Invalid owner"},{code:6004,name:"MalformedMessage",msg:"Malformed message"},{code:6005,name:"InvalidMessageBodyVersion",msg:"Invalid message body version"},{code:6006,name:"InvalidAmount",msg:"Invalid amount"},{code:6007,name:"InvalidDestinationDomain",msg:"Invalid destination domain"},{code:6008,name:"InvalidDestinationCaller",msg:"Invalid destination caller"},{code:6009,name:"InvalidMintRecipient",msg:"Invalid mint recipient"},{code:6010,name:"InvalidSender",msg:"Invalid sender"},{code:6011,name:"InvalidTokenPair",msg:"Invalid token pair"},{code:6012,name:"InvalidTokenMint",msg:"Invalid token mint"}]};function ea(e){return e||{connection:null}}function et(e){return T.from((0,c.nr)(e))}var es=(e,n,a)=>{let t=[T.from(A.P6.bytes.utf8.encode(e))];if(a)for(let e of a)"string"==typeof e?t.push(T.from(A.P6.bytes.utf8.encode(e))):Array.isArray(e)?t.push(T.from(e)):T.isBuffer(e)?t.push(e):t.push(e.toBuffer());let s=m.PublicKey.findProgramAddressSync(t,n);return{publicKey:s[0],bump:s[1]}};function ei(e,n){return e.getLatestBlockhash(n).then(e=>e.blockhash)}var er=class{async getOptions(e){return{options:[{mode:"taxi"}]}}async getRoute(e){let{srcAmount:n,dstAmount:a,srcAmountMax:t}=X(this.config,e),s=await this.getDuration(e);return(0,b.Jg)(e,{route:w,srcAmount:n,srcAmountMax:t,dstAmount:a,duration:s,allowance:f.zL,messageFee:{zroFee:0n,nativeFee:0n},fees:[]})}async getDuration(e){return D(this.config,e)}async transfer(e){I(e,this.config);let{srcChainKey:n,srcToken:a,srcAddress:t,dstChainKey:r,srcAmount:o}=e;if(await Z(this.config))throw Error("CCTP transfer are not available in your region, please try a different route.");let u=x(this.config,n),d=x(this.config,r),c=await this.getConnection(n),g=m.Keypair.generate(),{messageTransmitter:l,tokenMessenger:p}=u,y=new m.PublicKey(O(this.config,e)),M=new m.PublicKey(t),f=new m.PublicKey(a),S=new m.PublicKey(l.address),b=new m.PublicKey(p.address),k=await function(e,n,a,t,r,o,u,d,c){var g;let l=es("local_token",t,[r]),p=es("token_minter",t),y=es("sender_authority",t),M=es("token_messenger",t),f=es("__event_authority",t),S=(0,s.MO)(r,o),b=es("remote_token_messenger",t,[e.toString()]),k=es("message_transmitter",a);return(g=void 0,new A.$r(en,new m.PublicKey(t),ea(g))).methods.depositForBurn({amount:new A.BN(n.toString()),destinationDomain:e,mintRecipient:u}).accounts({owner:o,eventRentPayer:o,senderAuthorityPda:y.publicKey,burnTokenAccount:S,messageTransmitter:k.publicKey,tokenMessenger:M.publicKey,remoteTokenMessenger:b.publicKey,tokenMinter:p.publicKey,localToken:l.publicKey,burnTokenMint:r,messageTransmitterProgram:a,tokenMessengerMinterProgram:t,eventAuthority:f.publicKey,messageSentEventData:d,tokenProgram:i.H_}).instruction()}(d.domain,o,S,b,f,M,y,g.publicKey),h=new m.Transaction;return h.add(k),h.feePayer=M,h.recentBlockhash=await ei(c),h.partialSign(g),(0,v._X)(h,{connection:c})}supportsTransfer(e,n){return C(e,n,this.config,"solana")}constructor(e,n){this.config=e,this.getConnection=n}};async function em(e,n,a){let{attestation:t,cctpMessage:o}=n,{connection:u,payer:d}=a,{token:g,messageTransmitter:l,tokenMessenger:p}=V(e,o),y=new m.PublicKey(l.address),M=new m.PublicKey(p.address),f=new m.PublicKey(g.address),S=new m.PublicKey(d),b=await function(e,n,a,t,s,r,o){var u;let{messageBody:d,sourceDomain:g,nonce:l}=N((0,c.nr)(s)),{mintRecipient:p,burnToken:y}=L((0,c.nr)(d)),M=et(s),f=et(r),S=new m.PublicKey(a),b=new m.PublicKey((0,c.nr)(y)),k=new m.PublicKey((0,c.nr)(p)),h=es("message_transmitter",e),P=es("token_messenger",n),v=es("token_minter",n),T=es("local_token",n,[S]),w=es("remote_token_messenger",n,[g.toString()]),K=es("token_pair",n,[g.toString(),b]),x=es("custody",n,[S]),C=es("message_transmitter_authority",e,[n]).publicKey,D=es("used_nonces",e,[g.toString(),((l-1n)/6400n*6400n+1n).toString()]).publicKey,I=es("__event_authority",e),E=es("__event_authority",n),B=[{isSigner:!1,isWritable:!1,pubkey:P.publicKey},{isSigner:!1,isWritable:!1,pubkey:w.publicKey},{isSigner:!1,isWritable:!0,pubkey:v.publicKey},{isSigner:!1,isWritable:!0,pubkey:T.publicKey},{isSigner:!1,isWritable:!1,pubkey:K.publicKey},{isSigner:!1,isWritable:!0,pubkey:k},{isSigner:!1,isWritable:!0,pubkey:x.publicKey},{isSigner:!1,isWritable:!1,pubkey:i.H_},{isSigner:!1,isWritable:!1,pubkey:E.publicKey},{isSigner:!1,isWritable:!1,pubkey:n}],R=(u=void 0,new A.$r(ee,new m.PublicKey(e),ea(u)));return R.methods.receiveMessage({message:M,attestation:f}).accounts({payer:t,caller:t,authorityPda:C,messageTransmitter:h.publicKey,usedNonces:D,receiver:n,systemProgram:m.SystemProgram.programId,eventAuthority:I.publicKey,program:R.programId}).remainingAccounts(B).transaction()}(y,M,f,S,o,t),k=new m.Transaction,h=L(N(o).messageBody),P=new m.PublicKey((0,c.nr)(h.mintRecipient));if(!(0,s.MO)(f,S).equals(P))throw Error("Invalid signer: ".concat(d," is not the owner of the associated token account ").concat(P.toString()));return await u.getAccountInfo(P)||k.add((0,r.Ek)(S,P,S,f)),k.add(b),k.feePayer=S,k.recentBlockhash=await ei(u),(0,v._X)(k,{connection:u})}}}]);